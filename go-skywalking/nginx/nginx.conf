user root;
worker_processes auto;
error_log /data/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}
http {
      log_format json escape=json '{"@timestamp":"$time_iso8601",'
               '"@version":"1",'
               '"server_addr":"$server_addr",'
               '"remote_addr":"$remote_addr",'
               '"http_host":"$host",'
               '"uri":"$uri",'
               '"body_bytes_sent":$body_bytes_sent,'
               '"bytes_sent":$body_bytes_sent,'
               '"upstream_addr":"$upstream_addr",'
               '"upstream_response_time":$upstream_response_time,'
               '"upstream_status":$upstream_status,'
               '"upstream_connect_time":$upstream_connect_time,'
               '"request":"$request",'
               '"request_length":"$request_length",'
               '"request_time":"$request_time",'
               '"status":"$status",'
               '"http_referer":"$http_referer",'
               '"http_x_forwarded_for":"$http_x_forwarded_for",'
               '"trace_id":"$http_trace_id",'
               '"http_user_agent":"$http_user_agent"'
               '}';

       access_log  /data/nginx/access.log  json;

       sendfile            on;
       tcp_nopush          on;
       tcp_nodelay         on;
       keepalive_timeout   65;
       types_hash_max_size 4096;

       include             /usr/local/openresty/nginx/conf/mime.types;
       default_type        application/octet-stream;


    lua_package_path "/usr/local/openresty/nginx/conf/lib/?.lua;;";
    # Buffer represents the register inform and the queue of the finished segment
    lua_shared_dict tracing_buffer 100m;

    # Init is the timer setter and keeper
    # Setup an infinite loop timer to do register and trace report.
    init_worker_by_lua_block {
            local metadata_buffer = ngx.shared.tracing_buffer

            metadata_buffer:set('serviceName', 'skywalking-nginx')
            -- Instance means the number of Nginx deloyment, does not mean the worker instances
            metadata_buffer:set('serviceInstanceName', 'demo03')
            -- type 'boolean', mark the entrySpan include host/domain
            metadata_buffer:set('includeHostInEntrySpan', false)
            -- set ignoreSuffix, If the operation name(HTTP URI) of the entry span includes suffixes in this set, this segment would be ignored. Multiple values should be separated by a comma(',').
            -- require("skywalking.util").set_ignore_suffix(".jpg,.jpeg,.js,.css,.png,.bmp,.gif,.ico,.mp3,.mp4,.svg")
            -- set randomseed
            require("skywalking.util").set_randomseed()

            -- 替换地址
            require("skywalking.client"):startBackendTimer("http://10.201.0.210:12800")

            -- Any time you want to stop reporting metrics, call `destroyBackendTimer`
            -- require("skywalking.client"):destroyBackendTimer()

            -- If there is a bug of this `tablepool` implementation, we can
            -- disable it in this way
            -- require("skywalking.util").disable_tablepool()

            skywalking_tracer = require("skywalking.tracer")
    }

    server {
        listen 80;

        location / {
            rewrite_by_lua_block {
                skywalking_tracer:start("go-skywalking-server-demo")
                if ngx.var.http_sw8 ~= "" then
                  local sw8Str = ngx.var.http_sw8
                  local sw8Item = require('skywalking.util').split(sw8Str, "-")
                  if #sw8Item >= 2 then
                    ngx.req.set_header("trace_id", ngx.decode_base64(sw8Item[2]))
                  end
                end
            }

            # 替换
            proxy_pass http://10.201.0.210:9191/;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;


            body_filter_by_lua_block {
                if ngx.arg[2] then
                    skywalking_tracer:finish()
                end
            }

            log_by_lua_block {
                skywalking_tracer:prepareForReport()
            }
        }
    }
}